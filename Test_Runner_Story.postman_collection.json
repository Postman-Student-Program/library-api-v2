{
	"info": {
		"_postman_id": "140308cf-60d9-4923-9944-c50b1b665ec5",
		"name": "Test Runner Story",
		"description": "This collection tells a story to hit all the possible response types, including both sunny and rainy scenarios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "healthcheck (200 ok)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add a book (401 missing auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"foo\",\n    \"author\": \"bar\",\n    \"genre\": \"fiction\",\n    \"yearPublished\": 1500\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "add a book (400 missing prop)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n    \"title\": \"foo\",\n    \"yearPublished\": 1950\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "add a book (400 wrong prop type)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"foo\",\n    \"author\": \"bar\",\n    \"genre\": \"fiction\",\n    \"yearPublished\": \"nineteen eighty\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "add a book (201 success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json()",
							"",
							"const testBookTitle = pm.collectionVariables.get('testBookTitle')",
							"const testBookAuthor = pm.collectionVariables.get('testBookAuthor')",
							"const testBookGenre = pm.collectionVariables.get('testBookGenre')",
							"const testBookYearPublished = parseInt(pm.collectionVariables.get('testBookYearPublished'))",
							"",
							"pm.collectionVariables.set('testBookId', body.id)",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is a book\", function () {",
							"    pm.expect(typeof body.id).to.eql('string')",
							"    pm.expect(body.title).to.eql(testBookTitle)",
							"    pm.expect(body.author).to.eql(testBookAuthor)",
							"    pm.expect(body.genre).to.eql(testBookGenre)",
							"    pm.expect(body.yearPublished).to.eql(testBookYearPublished)",
							"    pm.expect(body.checkedOut).to.eql(false)",
							"    pm.expect(body.isPermanentCollection).to.eql(false)",
							"    pm.expect(typeof body.createdAt).to.eql('string')",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{testBookTitle}}\",\n    \"author\": \"{{testBookAuthor}}\",\n    \"genre\": \"{{testBookGenre}}\",\n    \"yearPublished\": {{testBookYearPublished}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all books (200 success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array books\", function () {",
							"    pm.expect(body.every(b => typeof b.id === \"string\")).to.eql(true)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "update the book (401 missing auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"checkedOut\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update the book (400 invalid prop)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"foo\": \"bar\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update the book (400 invalid prop type)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"yearPublished\": \"shoe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update the book (200 success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json()",
							"",
							"const testBookId = pm.collectionVariables.get('testBookId')",
							"const testBookTitle = pm.collectionVariables.get('testBookTitle')",
							"const testBookAuthor = pm.collectionVariables.get('testBookAuthor')",
							"const testBookGenre = pm.collectionVariables.get('testBookGenre')",
							"const testBookYearPublished = parseInt(pm.collectionVariables.get('testBookYearPublished'))",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a book with updated checkedOut: true\", function () {",
							"    pm.expect(body.id).to.eql(testBookId)",
							"    pm.expect(body.title).to.eql(testBookTitle)",
							"    pm.expect(body.author).to.eql(testBookAuthor)",
							"    pm.expect(body.genre).to.eql(testBookGenre)",
							"    pm.expect(body.yearPublished).to.eql(testBookYearPublished)",
							"    pm.expect(body.checkedOut).to.eql(true) // was updated to true in prev request",
							"    pm.expect(body.isPermanentCollection).to.eql(false)",
							"    pm.expect(typeof body.createdAt).to.eql('string')",
							"});",
							"",
							"console.log(body.checkedOut)",
							"console.log(body.title)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"checkedOut\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get added book (200 success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json()",
							"",
							"const testBookId = pm.collectionVariables.get('testBookId')",
							"",
							"const testBookTitle = pm.collectionVariables.get('testBookTitle')",
							"const testBookAuthor = pm.collectionVariables.get('testBookAuthor')",
							"const testBookGenre = pm.collectionVariables.get('testBookGenre')",
							"const testBookYearPublished = parseInt(pm.collectionVariables.get('testBookYearPublished'))",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is the added and updated book\", function () {",
							"    pm.expect(body.id).to.eql(testBookId)",
							"    pm.expect(body.title).to.eql(testBookTitle)",
							"    pm.expect(body.author).to.eql(testBookAuthor)",
							"    pm.expect(body.genre).to.eql(testBookGenre)",
							"    pm.expect(body.yearPublished).to.eql(testBookYearPublished)",
							"    pm.expect(body.checkedOut).to.eql(true)",
							"    pm.expect(body.isPermanentCollection).to.eql(false)",
							"    pm.expect(typeof body.createdAt).to.eql('string')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "filter all books to checkout true (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json()",
							"",
							"const testBookId = pm.collectionVariables.get(\"testBookId\")",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array of only checked out books and includes the added book\", function () {",
							"    pm.expect(body.every(b => b.checkedOut)).to.eql(true)",
							"    pm.expect(body.some(b => b.id === testBookId)).to.eql(true)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"checkedOut\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books?checkedOut=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "checkedOut",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete added book (401 missing auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete added book (204 success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api-key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fail to find deleted book (404 not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:id? d",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"query": [
						{
							"key": " d",
							"value": null
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{testBookId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4000",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "postmanrulz",
			"type": "string"
		},
		{
			"key": "testBookTitle",
			"value": "foo",
			"type": "string"
		},
		{
			"key": "testBookAuthor",
			"value": "bar",
			"type": "string"
		},
		{
			"key": "testBookGenre",
			"value": "fiction",
			"type": "string"
		},
		{
			"key": "testBookYearPublished",
			"value": "1500",
			"type": "string"
		},
		{
			"key": "testBookId",
			"value": ""
		}
	]
}